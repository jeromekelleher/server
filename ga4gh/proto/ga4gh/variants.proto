syntax = "proto3";

package ga4gh;

import "proto/google/protobuf/struct.proto";

service VariantService {
  // Gets a variant set by ID.
  rpc GetVariantSet(GetVariantSetRequest) returns (VariantSet);

  // Returns a list of all variant sets matching search criteria.
  //
  // Implements [GlobalAllianceApi.searchVariantSets](http://ga4gh.org/documentation/api/v0.5.1/ga4gh_api.html#/schema/org.ga4gh.searchVariantSets).
  rpc SearchVariantSets(SearchVariantSetsRequest) returns (SearchVariantSetsResponse);

  // Gets a variant by ID.
  rpc GetVariant(GetVariantRequest) returns (Variant);

  // Gets a list of variants matching the criteria.
  //
  // Implements [GlobalAllianceApi.searchVariants](http://ga4gh.org/documentation/api/v0.5.1/ga4gh_api.html#/schema/org.ga4gh.searchVariants).
  rpc SearchVariants(SearchVariantsRequest) returns (SearchVariantsResponse);

  // Gets a list of call sets matching the criteria.
  //
  // Implements [GlobalAllianceApi.searchCallSets](http://ga4gh.org/documentation/api/v0.5.1/ga4gh_api.html#/schema/org.ga4gh.searchCallSets).
  rpc SearchCallSets(SearchCallSetsRequest) returns (SearchCallSetsResponse);

  // Gets a call set by ID.
  rpc GetCallSet(GetCallSetRequest) returns (CallSet);
}

// Metadata describes a single piece of variant call metadata.
// These data include a top level key and either a single value string (value)
// or a list of key-value pairs (info.)
// Value and info are mutually exclusive.
message VariantSetMetadata {
  // The top-level key.
  string key = 1;

  // The value field for simple metadata
  string value = 2;

  // User-provided ID field, not enforced by this API.
  // Two or more pieces of structured metadata with identical
  // id and key fields are considered equivalent.
  string id = 4;

  // The number of values that can be included in a field described by this
  // metadata.
  int32 number = 6;

  // A textual description of this metadata.
  string description = 7;

  // Remaining structured metadata key-value pairs. This must be of the form
  // map<string, string[]> (string key mapping to a list of string values).
  map<string, google.protobuf.ListValue> info = 3;
}

// A variant set is a collection of call sets and variants. It contains summary
// statistics of those contents. A variant set belongs to a dataset.
message VariantSet {
  // The dataset to which this variant set belongs.
  string dataset_id = 1;

  // The server-generated ID of the variant set.
  string id = 2;

  // The metadata associated with this variant set.
  repeated VariantSetMetadata metadata = 4;
}

// A variant represents a change in DNA sequence relative to a reference
// sequence. For example, a variant could represent a SNP or an insertion.
// Variants belong to a variant set.
// Each of the calls on a variant represent a determination of genotype with
// respect to that variant. For example, a call might assign probability of 0.32
// to the occurrence of a SNP named rs1234 in a sample named NA12345. A call
// belongs to a call set, which contains related calls typically from one
// sample.
message Variant {
  // The ID of the variant set this variant belongs to.
  string variant_set_id = 15;

  // The server-generated ID of the variant, immutable.
  string id = 2;

  // Names for the variant, for example a RefSNP ID.
  repeated string names = 3;

  // The date this variant was created, in milliseconds from the epoch.
  int64 created = 12;

  // The time at which this variant was last updated in
  // milliseconds from the epoch.
  int64 updated = 17;

  // The reference on which this variant occurs.
  // (such as `chr20` or `X`)
  string reference_name = 14;

  // The position at which this variant occurs (0-based).
  // This corresponds to the first base of the string of reference bases.
  int64 start = 16;

  // The end position (0-based) of this variant. This corresponds to the first
  // base after the last base in the reference allele. So, the length of
  // the reference allele is (end - start). This is useful for variants
  // that don't explicitly give alternate bases, for example large deletions.
  int64 end = 13;

  // The reference bases for this variant. They start at the given
  // position.
  string reference_bases = 6;

  // The bases that appear instead of the reference bases.
  repeated string alternate_bases = 7;

  // A measure of how likely this variant is to be real.
  // A higher value is better.
  double quality = 8;

  // A list of filters (normally quality filters) this variant has failed.
  // `PASS` indicates this variant has passed all filters.
  repeated string filter = 9;

  // A map of additional variant information. This must be of the form
  // map<string, string[]> (string key mapping to a list of string values).
  map<string, google.protobuf.ListValue> info = 10;

  // The variant calls for this particular variant. Each one represents the
  // determination of genotype with respect to this variant.
  repeated VariantCall calls = 11;
}

// A call represents the determination of genotype with respect to a particular
// variant. It may include associated information such as quality and phasing.
// For example, a call might assign a probability of 0.32 to the occurrence of
// a SNP named rs1234 in a call set with the name NA12345.
message VariantCall {
  // The ID of the call set this variant call belongs to.
  string call_set_id = 8;

  // The name of the call set this variant call belongs to.
  string call_set_name = 9;

  // The genotype of this variant call. Each value represents either the value
  // of the `referenceBases` field or a 1-based index into
  // `alternateBases`. If a variant had a `referenceBases`
  // value of `T` and an `alternateBases`
  // value of `["A", "C"]`, and the `genotype` was
  // `[2, 1]`, that would mean the call
  // represented the heterozygous value `CA` for this variant.
  // If the `genotype` was instead `[0, 1]`, the
  // represented value would be `TA`. Ordering of the
  // genotype values is important if the `phaseset` is present.
  // If a genotype is not called (that is, a `.` is present in the
  // GT string) -1 is returned.
  repeated int32 genotype = 7;

  // If this field is present, this variant call's genotype ordering implies
  // the phase of the bases and is consistent with any other variant calls in
  // the same reference sequence which have the same phaseset value.
  // When importing data from VCF, if the genotype data was phased but no
  // phase set was specified this field will be set to `*`.
  string phaseset = 5;

  // The genotype likelihoods for this variant call. Each array entry
  // represents how likely a specific genotype is for this call. The value
  // ordering is defined by the GL tag in the VCF spec.
  // If Phred-scaled genotype likelihood scores (PL) are available and
  // log10(P) genotype likelihood scores (GL) are not, PL scores are converted
  // to GL scores.  If both are available, PL scores are stored in `info`.
  repeated double genotype_likelihood = 6;

  // A map of additional variant call information. This must be of the form
  // map<string, string[]> (string key mapping to a list of string values).
  map<string, google.protobuf.ListValue> info = 2;
}

// A call set is a collection of variant calls, typically for one sample. It
// belongs to a variant set.
message CallSet {
  // The server-generated ID of the call set, immutable.
  string id = 1;

  // The call set name.
  string name = 2;

  // The sample ID this call set corresponds to.
  string sample_id = 7;

  // The IDs of the variant sets this call set belongs to.
  repeated string variant_set_ids = 6;

  // The date this call set was created in milliseconds from the epoch.
  int64 created = 5;

  // The date this call set was created in milliseconds from the epoch.
  int64 updated = 8;

  // A map of additional call set information. This must be of the form
  // map<string, string[]> (string key mapping to a list of string values).
  map<string, google.protobuf.ListValue> info = 4;
}

// The variant set request.
message GetVariantSetRequest {
  // Required. The ID of the variant set.
  string variant_set_id = 1;
}

// The search variant sets request.
message SearchVariantSetsRequest {
  // Exactly one dataset ID must be provided here. Only variant sets which
  // belong to this dataset will be returned.
  repeated string dataset_ids = 1;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `nextPageToken` from the previous response.
  string page_token = 2;

  // The maximum number of variant sets to return in a request.
  int32 page_size = 3;
}

// The search variant sets response.
message SearchVariantSetsResponse {
  // The variant sets belonging to the requested dataset.
  repeated VariantSet variant_sets = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

// The variant search request.
message SearchVariantsRequest {
  // At most one variant set ID must be provided. Only variants from this
  // variant set will be returned. If omitted, a call set id must be included in
  // the request.
  repeated string variant_set_ids = 1;

  // Only return variants which have exactly this name.
  string variant_name = 2;

  // Only return variant calls which belong to call sets with these ids.
  // Leaving this blank returns all variant calls. If a variant has no
  // calls belonging to any of these call sets, it won't be returned at all.
  // Currently, variants with no calls from any call set will never be returned.
  repeated string call_set_ids = 3;

  // Required. Only return variants in this reference sequence.
  string reference_name = 4;

  // The beginning of the window (0-based, inclusive) for which
  // overlapping variants should be returned. If unspecified, defaults to 0.
  int64 start = 5;

  // The end of the window, 0-based exclusive. If unspecified or 0, defaults to
  // the length of the reference.
  int64 end = 6;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `nextPageToken` from the previous response.
  string page_token = 7;

  // The maximum number of variants to return. If unspecified, defaults to 5000.
  int32 page_size = 8;
}

// The variant search response.
message SearchVariantsResponse {
  // The list of matching Variants.
  repeated Variant variants = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

message GetVariantRequest {
  // The ID of the variant.
  string variant_id = 1;
}

// The call set search request.
message SearchCallSetsRequest {
  // Restrict the query to call sets within the given variant sets. At least one
  // ID must be provided.
  repeated string variant_set_ids = 1;

  // Only return call sets for which a substring of the name matches this
  // string.
  string name = 2;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `nextPageToken` from the previous response.
  string page_token = 3;

  // The maximum number of call sets to return. If unspecified, defaults to
  // 1000.
  int32 page_size = 4;
}

// The call set search response.
message SearchCallSetsResponse {
  // The list of matching call sets.
  repeated CallSet call_sets = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

message GetCallSetRequest {
  // The ID of the call set.
  string call_set_id = 1;
}
